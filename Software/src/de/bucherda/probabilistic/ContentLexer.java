/* The following code was generated by JFlex 1.6.1 */

package de.bucherda.probabilistic;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>contentXml.flex</tt>
 */
class ContentLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ATTR = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\55\1\0\1\54\1\55\22\0\1\37\1\56\1\1"+
    "\12\0\1\47\1\42\1\34\1\43\1\41\6\0\1\50\3\0\1\2"+
    "\1\40\1\10\1\36\1\0\1\51\4\0\1\46\6\0\1\26\1\33"+
    "\1\25\2\0\1\53\1\0\1\45\1\44\13\0\1\11\1\14\1\22"+
    "\1\31\1\3\1\35\1\16\1\23\1\13\2\0\1\4\1\5\1\6"+
    "\1\17\1\20\1\0\1\12\1\27\1\7\1\15\1\21\1\52\1\30"+
    "\1\32\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\0\1\2\1\3\1\2\1\4"+
    "\1\2\1\1\1\5\1\6\1\2\3\1\23\0\1\7"+
    "\1\0\1\10\46\0\1\11\53\0\1\12\61\0\1\13"+
    "\1\0\1\14\52\0\1\15\3\0\1\16\5\0\1\17"+
    "\7\0\1\20\4\0\1\21\1\0\1\22\14\0\1\23"+
    "\2\0\1\24\1\0\1\25\2\0\1\26\4\0\1\27"+
    "\5\0\1\30\5\0\1\31\5\0\1\32\4\0\1\33"+
    "\2\0\1\34\4\0\1\35\15\0\1\36\1\37\6\0"+
    "\1\40\1\0\1\41\5\0\1\42\4\0\1\43\6\0"+
    "\1\44\1\45\2\0\1\46\10\0\1\47\3\0\1\50"+
    "\11\0\1\51\10\0\1\52\3\0\1\53\2\0\1\54"+
    "\1\0\1\55\5\0\1\56\7\0\1\57\1\60\3\0"+
    "\1\61\13\0\1\62\4\0\1\63\7\0\1\64\7\0"+
    "\1\65\3\0\1\66\10\0\1\67\2\0\1\70\10\0"+
    "\1\71\17\0\1\67\1\0\1\67\4\0\1\72\20\0"+
    "\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\274\0\353\0\274"+
    "\0\u011a\0\u0149\0\u0178\0\274\0\u01a7\0\u01d6\0\274\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d"+
    "\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\274\0\u01a7\0\274\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0"+
    "\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\274\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\274\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722"+
    "\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02"+
    "\0\u1d31\0\u1d60\0\274\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b"+
    "\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3"+
    "\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b"+
    "\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3"+
    "\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b"+
    "\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\274"+
    "\0\u25a3\0\u25d2\0\u2601\0\274\0\u2630\0\u265f\0\u268e\0\u26bd"+
    "\0\u26ec\0\274\0\u271b\0\u274a\0\u2779\0\u27a8\0\u27d7\0\u2806"+
    "\0\u2835\0\274\0\u2864\0\u2893\0\u28c2\0\u28f1\0\274\0\u2920"+
    "\0\274\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69"+
    "\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\274\0\u2b83\0\u2bb2"+
    "\0\274\0\u2be1\0\274\0\u2c10\0\u2c3f\0\274\0\u2c6e\0\u2c9d"+
    "\0\u2ccc\0\u2cfb\0\274\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6"+
    "\0\274\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\274\0\u2f00"+
    "\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\274\0\u2feb\0\u301a\0\u3049"+
    "\0\u3078\0\274\0\u30a7\0\u30d6\0\274\0\u3105\0\u3134\0\u3163"+
    "\0\u3192\0\274\0\u31c1\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac"+
    "\0\u32db\0\u330a\0\u3339\0\u3368\0\u3397\0\u33c6\0\u33f5\0\274"+
    "\0\274\0\u3424\0\u3453\0\u3482\0\u34b1\0\u34e0\0\u350f\0\274"+
    "\0\u353e\0\274\0\u356d\0\u359c\0\u35cb\0\u35fa\0\u3629\0\274"+
    "\0\u3658\0\u3687\0\u36b6\0\u36e5\0\274\0\u3714\0\u3743\0\u3772"+
    "\0\u37a1\0\u37d0\0\u37ff\0\274\0\274\0\u382e\0\u385d\0\274"+
    "\0\u388c\0\u38bb\0\u38ea\0\u3919\0\u3948\0\u3977\0\u39a6\0\u39d5"+
    "\0\274\0\u3a04\0\u3a33\0\u3a62\0\274\0\u3a91\0\u3ac0\0\u3aef"+
    "\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09\0\274\0\u3c38"+
    "\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52\0\u3d81\0\274"+
    "\0\u3db0\0\u3ddf\0\u3e0e\0\274\0\u3e3d\0\u3e6c\0\274\0\u3e9b"+
    "\0\274\0\u3eca\0\u3ef9\0\u3f28\0\u3f57\0\u3f86\0\274\0\u3fb5"+
    "\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0\0\u40cf\0\274\0\274"+
    "\0\u40fe\0\u412d\0\u415c\0\274\0\u418b\0\u41ba\0\u41e9\0\u4218"+
    "\0\u4247\0\u4276\0\u42a5\0\u42d4\0\u4303\0\u4332\0\u4361\0\274"+
    "\0\u4390\0\u43bf\0\u43ee\0\u441d\0\274\0\u444c\0\u447b\0\u44aa"+
    "\0\u44d9\0\u4508\0\u4537\0\u4566\0\274\0\u4595\0\u45c4\0\u45f3"+
    "\0\u4622\0\u4651\0\u4680\0\u46af\0\274\0\u46de\0\u470d\0\u473c"+
    "\0\274\0\u476b\0\u479a\0\u47c9\0\u47f8\0\u4827\0\u4856\0\u4885"+
    "\0\u48b4\0\u48b4\0\u48e3\0\u4912\0\274\0\u4941\0\u4970\0\u499f"+
    "\0\u49ce\0\u49fd\0\u4a2c\0\u4a5b\0\u4a8a\0\274\0\u4ab9\0\u4ae8"+
    "\0\u4b17\0\u4b46\0\u4b75\0\u4ba4\0\u4bd3\0\u4c02\0\u4c31\0\u4c60"+
    "\0\u4c8f\0\u4cbe\0\u4ced\0\u4d1c\0\u4d4b\0\u4ab9\0\u4d7a\0\274"+
    "\0\u4da9\0\u4dd8\0\u4e07\0\u4e36\0\274\0\u4e65\0\u4e94\0\u4ec3"+
    "\0\u4ef2\0\u4f21\0\u4f50\0\u4f7f\0\u4fae\0\u4fdd\0\u500c\0\u503b"+
    "\0\u506a\0\u5099\0\u50c8\0\u50f7\0\u5126\0\274";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\5\5\1\10\23\5\1\11\2\5"+
    "\1\12\14\5\2\12\1\5\1\13\1\14\55\13\10\15"+
    "\1\5\26\15\1\16\14\15\2\16\1\15\47\17\1\20"+
    "\7\17\62\0\1\21\1\22\1\23\1\24\1\25\1\0"+
    "\1\26\1\27\1\30\2\0\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\1\36\2\0\1\37\1\0\1\40\2\0"+
    "\1\41\1\0\1\42\17\0\1\43\10\0\1\44\105\0"+
    "\1\12\14\0\2\12\1\0\1\13\1\0\55\13\10\45"+
    "\1\46\56\45\1\46\26\45\1\16\14\45\2\16\1\45"+
    "\47\0\1\47\13\0\1\50\1\51\22\0\1\52\41\0"+
    "\1\53\56\0\1\54\54\0\1\55\5\0\1\56\7\0"+
    "\1\57\32\0\1\60\61\0\1\61\1\62\52\0\1\63"+
    "\61\0\1\64\62\0\1\65\52\0\1\66\11\0\1\67"+
    "\47\0\1\70\56\0\1\71\70\0\1\72\36\0\1\73"+
    "\62\0\1\74\52\0\1\75\5\0\1\76\50\0\1\77"+
    "\1\100\1\101\1\102\2\0\1\103\1\0\1\104\2\0"+
    "\1\105\1\106\2\0\1\107\1\0\1\110\2\0\1\111"+
    "\1\0\1\112\55\0\1\113\75\0\1\114\17\0\1\115"+
    "\51\0\1\116\73\0\1\117\45\0\1\120\12\0\1\121"+
    "\63\0\1\122\57\0\1\123\33\0\1\124\60\0\1\125"+
    "\102\0\1\126\53\0\1\127\60\0\1\130\33\0\1\131"+
    "\104\0\1\132\30\0\1\133\60\0\1\134\5\0\1\135"+
    "\42\0\1\136\62\0\1\137\61\0\1\140\50\0\1\141"+
    "\71\0\1\142\51\0\1\143\55\0\1\144\102\0\1\145"+
    "\30\0\1\146\53\0\1\147\23\0\1\150\41\0\1\151"+
    "\56\0\1\152\54\0\1\153\15\0\1\154\35\0\1\155"+
    "\1\156\55\0\1\157\62\0\1\160\52\0\1\161\11\0"+
    "\1\162\61\0\1\163\36\0\1\164\62\0\1\165\52\0"+
    "\1\166\5\0\1\167\52\0\1\170\120\0\1\171\14\0"+
    "\1\172\60\0\1\173\52\0\1\174\56\0\1\175\62\0"+
    "\1\176\52\0\1\177\56\0\1\200\124\0\1\201\16\0"+
    "\1\202\54\0\1\203\102\0\1\204\35\0\1\205\103\0"+
    "\1\206\22\0\1\207\60\0\1\210\66\0\1\211\66\0"+
    "\1\212\44\0\1\213\46\0\1\214\5\0\1\215\62\0"+
    "\1\216\54\0\1\217\62\0\1\220\51\0\1\221\57\0"+
    "\1\222\54\0\1\223\50\0\1\224\75\0\1\225\63\0"+
    "\1\226\57\0\1\227\33\0\1\230\104\0\1\231\55\0"+
    "\1\232\33\0\1\233\56\0\1\234\60\0\1\235\5\0"+
    "\1\236\42\0\1\237\62\0\1\240\66\0\1\241\51\0"+
    "\1\242\55\0\1\243\102\0\1\244\30\0\1\245\53\0"+
    "\1\246\55\0\1\247\105\0\1\250\36\0\1\251\64\0"+
    "\1\252\46\0\1\253\77\0\1\254\35\0\1\255\52\0"+
    "\1\256\57\0\1\257\105\0\1\260\33\0\1\261\60\0"+
    "\1\262\51\0\1\263\62\0\1\264\51\0\1\265\71\0"+
    "\1\266\50\0\1\267\63\0\1\270\45\0\1\271\55\0"+
    "\1\272\54\0\1\273\75\0\1\274\61\0\1\275\40\0"+
    "\1\276\55\0\1\277\107\0\1\300\24\0\1\301\54\0"+
    "\1\302\62\0\1\303\52\0\1\304\56\0\1\305\64\0"+
    "\1\306\100\0\1\307\35\0\1\310\47\0\1\311\60\0"+
    "\1\312\66\0\1\313\66\0\1\314\44\0\1\315\56\0"+
    "\1\316\62\0\1\317\51\0\1\320\57\0\1\321\54\0"+
    "\1\322\104\0\1\323\25\0\1\324\104\0\1\325\30\0"+
    "\1\326\57\0\1\327\57\0\1\330\46\0\2\331\1\0"+
    "\54\331\4\0\1\332\55\0\1\333\63\0\1\334\53\0"+
    "\1\335\65\0\1\336\53\0\1\337\51\0\1\340\63\0"+
    "\1\341\55\0\1\342\74\0\1\343\36\0\1\344\57\0"+
    "\1\345\106\0\1\346\27\0\1\347\51\0\1\350\65\0"+
    "\1\351\54\0\1\352\51\0\1\353\62\0\1\354\52\0"+
    "\1\355\73\0\1\356\46\0\1\357\77\0\1\360\35\0"+
    "\1\361\53\0\1\362\62\0\1\363\60\0\1\364\55\0"+
    "\1\365\51\0\1\366\71\0\1\367\50\0\1\370\63\0"+
    "\1\371\61\0\1\372\61\0\1\373\40\0\1\374\55\0"+
    "\1\375\60\0\1\376\67\0\1\377\44\0\1\u0100\57\0"+
    "\1\u0101\57\0\1\u0102\55\0\1\u0103\46\0\2\331\1\u0104"+
    "\54\331\17\0\1\u0105\47\0\1\u0106\51\0\1\u0107\70\0"+
    "\1\u0108\46\0\1\u0109\54\0\1\u010a\65\0\1\u010b\63\0"+
    "\1\u010c\50\0\1\u010d\120\0\1\u010e\11\0\1\u010f\50\0"+
    "\2\u0110\1\0\54\u0110\10\0\1\u0111\74\0\1\u0112\67\0"+
    "\1\u0113\51\0\1\u0114\32\0\1\u0115\57\0\1\u0116\57\0"+
    "\1\u0117\51\0\1\u0118\60\0\1\u0119\65\0\1\u011a\46\0"+
    "\1\u011b\63\0\1\u011c\55\0\1\u011d\74\0\1\u011e\36\0"+
    "\1\u011f\53\0\1\u0120\65\0\1\u0121\54\0\1\u0122\51\0"+
    "\1\u0123\56\0\1\u0124\63\0\1\u0125\26\0\1\u0126\23\0"+
    "\1\u0127\106\0\1\u0128\74\0\1\u0129\14\0\1\u012a\23\0"+
    "\1\u012b\31\0\1\u012c\52\0\1\u012d\64\0\1\u012e\57\0"+
    "\1\u012f\50\0\1\u0130\55\0\1\u0131\64\0\1\u0132\45\0"+
    "\2\u0110\1\u0133\54\u0110\17\0\1\u0134\45\0\1\u0135\70\0"+
    "\1\u0136\45\0\1\u0137\57\0\1\u0138\56\0\1\u0139\51\0"+
    "\1\u013a\70\0\1\u013b\44\0\1\u013c\65\0\1\u013d\63\0"+
    "\1\u013e\50\0\1\u013f\55\0\1\u0140\74\0\1\u0141\40\0"+
    "\1\u0142\60\0\1\u0143\52\0\1\u0144\123\0\1\u0145\11\0"+
    "\1\u0146\53\0\1\u0147\63\0\1\u0148\51\0\1\u0149\113\0"+
    "\1\u014a\37\0\1\u014b\40\0\1\u014c\63\0\1\u014d\103\0"+
    "\1\u014e\26\0\1\u014f\105\0\1\u0150\34\0\1\u0151\55\0"+
    "\1\u0152\50\0\1\u0153\63\0\1\u0154\56\0\1\u0155\55\0"+
    "\1\u0156\60\0\1\u0157\55\0\1\u0158\60\0\1\u0159\50\0"+
    "\1\u015a\71\0\1\u015b\66\0\1\u015c\40\0\1\u015d\50\0"+
    "\1\u015e\64\0\1\u015f\76\0\1\u0160\35\0\1\u0161\26\0"+
    "\1\u0162\20\0\1\u0163\60\0\1\u0164\63\0\1\u0165\105\0"+
    "\1\u0166\22\0\1\u0167\74\0\1\u0168\40\0\1\u0169\60\0"+
    "\1\u016a\111\0\1\u016b\21\0\1\u016c\74\0\1\u016d\40\0"+
    "\1\u016e\63\0\1\u016f\60\0\1\u0170\57\0\1\u0171\50\0"+
    "\1\u0172\106\0\1\u0173\26\0\1\u0174\105\0\1\u0175\30\0"+
    "\1\u0176\50\0\1\u0177\1\0\55\u0177\10\0\1\u0178\54\0"+
    "\1\u0179\110\0\1\u017a\27\0\1\u017b\55\0\1\u017c\51\0"+
    "\1\u017d\54\0\1\u017e\65\0\1\u017f\51\0\1\u0180\63\0"+
    "\1\u0181\51\0\1\u0182\72\0\1\u0183\42\0\1\u0184\112\0"+
    "\1\u0185\22\0\1\u0186\63\0\1\u0187\57\0\1\u0188\45\0"+
    "\1\u0177\1\u0189\55\u0177\11\0\1\u018a\46\0\1\u018b\61\0"+
    "\1\u018c\112\0\1\u018d\16\0\1\u018e\1\0\55\u018e\10\0"+
    "\1\u018f\56\0\1\u0190\54\0\1\u0191\110\0\1\u0192\41\0"+
    "\1\u0193\43\0\1\u0194\53\0\1\u0195\105\0\1\u0196\27\0"+
    "\1\u0197\51\0\1\u0198\1\0\55\u0198\15\0\1\u0199\42\0"+
    "\1\u019a\55\0\1\u018e\1\u019b\55\u018e\40\0\1\u019c\17\0"+
    "\1\u019d\67\0\1\u019e\47\0\1\u019f\63\0\1\u01a0\51\0"+
    "\1\u01a1\53\0\1\u0198\1\u01a2\55\u0198\3\0\1\u01a3\53\0"+
    "\1\u01a4\1\0\55\u01a4\10\0\1\u01a5\23\0\1\u01a6\23\0"+
    "\1\u01a7\55\0\1\u01a8\1\0\55\u01a8\3\0\1\u01a9\113\0"+
    "\1\u01aa\56\0\1\u01ab\26\0\1\u01ac\56\0\1\u01ad\46\0"+
    "\1\u01a4\1\u01ae\55\u01a4\10\0\1\u01a5\107\0\1\u01af\15\0"+
    "\1\u01a8\1\u01b0\55\u01a8\35\0\1\u01b1\22\0\1\u01b2\56\0"+
    "\1\u01b3\55\0\2\u01b4\1\0\54\u01b4\10\0\1\u01b5\11\0"+
    "\1\u01b6\14\0\1\u01b7\14\0\2\u01b7\43\0\1\u01b8\24\0"+
    "\1\u01b9\106\0\1\u01ba\16\0\1\u01b2\1\u01bb\55\u01b2\1\u01bc"+
    "\1\0\55\u01bc\2\u01b4\1\u01bd\54\u01b4\17\0\1\u01be\61\0"+
    "\1\u01b6\14\0\1\u01b7\14\0\2\u01b7\44\0\1\u01bf\14\0"+
    "\1\u01c0\55\0\10\u01c1\1\u01c2\23\u01c1\1\u01c3\2\u01c1\1\u01c4"+
    "\14\u01c1\1\u01c4\1\u01bb\1\u01c1\1\u01bc\1\u01c5\55\u01bc\34\0"+
    "\1\u01c6\27\0\1\u01c7\52\0\1\u01c8\55\0\1\u01c9\1\0"+
    "\55\u01c9\40\u01c1\1\u01ca\14\u01c1\1\0\11\u01c1\1\u01c2\27\u01c1"+
    "\1\u01ca\14\u01c1\1\0\11\u01c1\1\u01c2\23\u01c1\1\u01c3\2\u01c1"+
    "\1\u01c4\1\u01ca\13\u01c1\1\u01c4\1\u01bb\1\u01c1\20\0\1\u01cb"+
    "\52\0\1\u01cc\101\0\1\u01cd\17\0\1\u01c9\1\u01ce\55\u01c9"+
    "\1\u01c1\1\u01cf\36\u01c1\1\u01ca\14\u01c1\1\0\1\u01c1\11\0"+
    "\1\u01d0\60\0\1\u01d1\46\0\1\u01d2\53\0\1\u01cf\1\u01d3"+
    "\36\u01cf\1\u01d4\14\u01cf\1\u01d5\1\u01cf\12\0\1\u01d6\52\0"+
    "\1\u01d7\56\0\1\u01d8\50\0\10\u01c1\1\u01c2\23\u01c1\1\u01c3"+
    "\3\u01c1\1\u01ca\14\u01c1\1\0\1\u01c1\1\u01cf\1\u01d9\36\u01cf"+
    "\1\u01d4\14\u01cf\1\u01d5\1\u01cf\1\u01d5\1\u01da\55\u01d5\11\0"+
    "\1\u01db\50\0\1\u01dc\75\0\1\u01dd\34\0\1\u01cf\1\u01d3"+
    "\6\u01cf\1\u01de\23\u01cf\1\u01df\3\u01cf\1\u01d4\14\u01cf\1\u01d5"+
    "\1\u01cf\10\0\1\u01e0\23\0\1\u01e1\27\0\1\u01e2\111\0"+
    "\1\u01e3\35\0\1\u01e4\37\0\1\u01cf\1\u01d3\6\u01cf\1\u01de"+
    "\27\u01cf\1\u01d4\14\u01cf\1\u01d5\1\u01cf\10\0\1\u01e0\56\0"+
    "\1\u01e5\47\0\1\u01e6\106\0\1\u01e7\25\0\1\u01e8\1\0"+
    "\55\u01e8\13\0\1\u01e9\43\0\1\u01e8\1\u01ea\55\u01e8\6\0"+
    "\1\u01eb\60\0\1\u01b5\64\0\1\u01ec\100\0\1\u01ed\17\0"+
    "\1\u01ee\121\0\1\u01ef\57\0\1\u01f0\57\0\1\u01f1\57\0"+
    "\1\u01f2\57\0\1\u01f3\7\0\1\u01f4\113\0\1\u01f5\30\0"+
    "\1\u01f6\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20821];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\0\2\11\1\1\1\11\3\1"+
    "\1\11\2\1\1\11\1\1\23\0\1\11\1\0\1\11"+
    "\46\0\1\11\53\0\1\11\61\0\1\11\1\0\1\1"+
    "\52\0\1\11\3\0\1\11\5\0\1\11\7\0\1\11"+
    "\4\0\1\11\1\0\1\11\14\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\5\0\1\11"+
    "\5\0\1\11\5\0\1\11\4\0\1\11\2\0\1\11"+
    "\4\0\1\11\15\0\2\11\6\0\1\11\1\0\1\11"+
    "\5\0\1\11\4\0\1\11\6\0\2\11\2\0\1\11"+
    "\10\0\1\11\3\0\1\11\11\0\1\11\10\0\1\11"+
    "\3\0\1\11\2\0\1\11\1\0\1\11\5\0\1\11"+
    "\7\0\2\11\3\0\1\11\13\0\1\11\4\0\1\11"+
    "\7\0\1\11\7\0\1\11\3\0\1\11\10\0\1\1"+
    "\2\0\1\11\10\0\1\11\17\0\1\1\1\0\1\11"+
    "\4\0\1\11\20\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

/**
 * Return a new Symbol with the given token id, and with the current line and
 * column numbers.
 */
Symbol newSym(int tokenId) {
    return new Symbol(tokenId, yyline, yycolumn);
}

/**
 * Return a new Symbol with the given token id, the current line and column
 * numbers, and the given token value.  The value is used for tokens such as
 * identifiers and numbers.
 */
Symbol newSym(int tokenId, Object value) {
    return new Symbol(tokenId, yyline, yycolumn, value);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ContentLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 60: break;
          case 2: 
            { return newSym(sym.ZERO, "ERROR: "+yytext());
            }
          case 61: break;
          case 3: 
            { yybegin(STRING); return newSym(sym.QM, "ANF_AUF");
            }
          case 62: break;
          case 4: 
            { return newSym(sym.CLOSETAG, yytext());
            }
          case 63: break;
          case 5: 
            { return newSym(sym.STRING, yytext());
            }
          case 64: break;
          case 6: 
            { yybegin(YYINITIAL); return newSym(sym.QM, "ANF_ZU");
            }
          case 65: break;
          case 7: 
            { return newSym(sym.ENDTAG, yytext());
            }
          case 66: break;
          case 8: 
            { yybegin(YYINITIAL); return newSym(sym.ATTR, yytext());
            }
          case 67: break;
          case 9: 
            { yybegin(YYINITIAL);
            }
          case 68: break;
          case 10: 
            { yybegin(COMMENT);/* ignore */
            }
          case 69: break;
          case 11: 
            { return newSym(sym.LIST_O, yytext());
            }
          case 70: break;
          case 12: 
            { return newSym(sym.NAME_O, yytext());
            }
          case 71: break;
          case 13: 
            { return newSym(sym.MIXED_O, yytext());
            }
          case 72: break;
          case 14: 
            { return newSym(sym.TEXT, yytext());
            }
          case 73: break;
          case 15: 
            { return newSym(sym.GROUP_O, yytext());
            }
          case 74: break;
          case 16: 
            { return newSym(sym.START_O, yytext());
            }
          case 75: break;
          case 17: 
            { return newSym(sym.LIST_C, yytext());
            }
          case 76: break;
          case 18: 
            { return newSym(sym.NAME_C, yytext());
            }
          case 77: break;
          case 19: 
            { return newSym(sym.DATA_C, yytext());
            }
          case 78: break;
          case 20: 
            { return newSym(sym.EMPTY, yytext());
            }
          case 79: break;
          case 21: 
            { return newSym(sym.EXCEPT_O, yytext());
            }
          case 80: break;
          case 22: 
            { return newSym(sym.NSNAME_O, yytext());
            }
          case 81: break;
          case 23: 
            { yybegin(ATTR); return newSym(sym.GRAMMAR, yytext());
            }
          case 82: break;
          case 24: 
            { return newSym(sym.CHOICE_O, yytext());
            }
          case 83: break;
          case 25: 
            { return newSym(sym.MIXED_C, yytext());
            }
          case 84: break;
          case 26: 
            { return newSym(sym.GROUP_C, yytext());
            }
          case 85: break;
          case 27: 
            { return newSym(sym.START_C, yytext());
            }
          case 86: break;
          case 28: 
            { return newSym(sym.ELEMENT_O, yytext());
            }
          case 87: break;
          case 29: 
            { return newSym(sym.ANYNAME_O, yytext());
            }
          case 88: break;
          case 30: 
            { return newSym(sym.EXCEPT_C, yytext());
            }
          case 89: break;
          case 31: 
            { return newSym(sym.NSNAME_C, yytext());
            }
          case 90: break;
          case 32: 
            { return newSym(sym.CHOICE_C, yytext());
            }
          case 91: break;
          case 33: 
            { return newSym(sym.DEFINE_C, yytext());
            }
          case 92: break;
          case 34: 
            { return newSym(sym.ANYNAME, yytext());
            }
          case 93: break;
          case 35: 
            { return newSym(sym.OPTIONAL_O, yytext());
            }
          case 94: break;
          case 36: 
            { return newSym(sym.ELEMENT_C, yytext());
            }
          case 95: break;
          case 37: 
            { return newSym(sym.ANYNAME_C, yytext());
            }
          case 96: break;
          case 38: 
            { return newSym(sym.GRAMMAR_C, yytext());
            }
          case 97: break;
          case 39: 
            { return newSym(sym.ATTRIBUTE_O, yytext());
            }
          case 98: break;
          case 40: 
            { return newSym(sym.ONEORMORE_O, yytext());
            }
          case 99: break;
          case 41: 
            { return newSym(sym.OPTIONAL_C, yytext());
            }
          case 100: break;
          case 42: 
            { return newSym(sym.INTERLEAVE_O, yytext());
            }
          case 101: break;
          case 43: 
            { return newSym(sym.ZEROORMORE_O, yytext());
            }
          case 102: break;
          case 44: 
            { return newSym(sym.ATTRIBUTE_C, yytext());
            }
          case 103: break;
          case 45: 
            { return newSym(sym.ONEORMORE_C, yytext());
            }
          case 104: break;
          case 46: 
            { return newSym(sym.NOTALLOWED, yytext());
            }
          case 105: break;
          case 47: 
            { return newSym(sym.INTERLEAVE_C, yytext());
            }
          case 106: break;
          case 48: 
            { return newSym(sym.ZEROORMORE_C, yytext());
            }
          case 107: break;
          case 49: 
            { return newSym(sym.NAME, yytext());
            }
          case 108: break;
          case 50: 
            { return newSym(sym.REF, yytext());
            }
          case 109: break;
          case 51: 
            { return newSym(sym.DATA, yytext());
            }
          case 110: break;
          case 52: 
            { return newSym(sym.VALUE, yytext());
            }
          case 111: break;
          case 53: 
            { return newSym(sym.DEFINE, yytext());
            }
          case 112: break;
          case 54: 
            { return newSym(sym.ELEMENT, yytext());
            }
          case 113: break;
          case 55: 
            { return newSym(sym.ATTRIBUTE, yytext());
            }
          case 114: break;
          case 56: 
            { return newSym(sym.PARENTREF, yytext());
            }
          case 115: break;
          case 57: 
            { return newSym(sym.EXTERNALREF, yytext());
            }
          case 116: break;
          case 58: 
            { return newSym(sym.PARAM, yytext());
            }
          case 117: break;
          case 59: 
            { return newSym(sym.HEAD, yytext());
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
